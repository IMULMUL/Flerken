{
    "generic":{
        "echo_type": {
            "0": {"regex": "(\\x24\\x28\\x20*?(echo|printf)[^\\x28\\x29]*?\\x29\\w)", "length": 190, "condition": "<"},
            "1": {"regex": "(\\x24\\x28(\\x7B|\\x20)*?(echo|printf)[^\\x28\\x29]*?\\x29)", "length": 190, "condition": "<"}
        },
        "sub_syntax":{
            "0": {"regex": "\\x24\\x7B[^\\x2F]*?\\x2F\\x2F([^\\x2F\\x7D]|\\x5C\\x2F)*?\\x2F[^\\x2F\\x7D]*?\\x7D", "length": 350, "condition": "<"},
            "1": {"regex": "[\\x7C\\x3D\\x3B]", "length": 380, "condition": "<"}
        },
        "reverse_char":{
            "0": {"regex": "[\\x7C](\\x7B|\\x20)*?rev(\\x20|\\x2C)"}
        },
        "special_calc":{
            "0": {"regex": "\\x24\\x28\\x28[^\\x29]*?\\x23[^\\x29]*?\\x29\\x29"}
        },
        "ifs":{
            "0": {"regex": "\\x24\\x7B(?:IFS)\\x7D"}
        },
        "offset_ctl":{
            "0": {"regex": "\\x24\\x7B[a-z]*?\\x3A[0-9a-z\\x2D\\x28\\x29]*?\\x3A[0-9a-z]*?\\x7D"},
            "1": {"regex": "[\\x7C\\x3D\\x3B]"}
        },
        "escape_char":{
            "0": {"regex": "(echo|printf)[^\\x7C]*?(\\x5C[^\\x7C]*?)[^\\x7C]*?\\x7C[\\x20]*?bash", "length": 1000, "condition": "<"}
        },
        "base64":{
            "0": {"regex": "[\\x7C](\\x7B|\\x20)*?base64|exec\\x28.*?base64"}
        },
        "rot13_char":{
            "0": {"regex": "[\\x7C](\\x7B|\\x20)*?tr(\\x20|\\x2C)"},
            "1": {"regex": "tr.*?(a-m|n-z)"}
        },
        "octal_code":{
            "0": {"regex": "\\x24\\x27.*?\\x5C[0-9][0-9][0-9].*?\\x27"}
        },
        "hex_or_unicode":{
            "0": {"regex": "(\\x24\\x27[^\\x5B]*?\\x5C[xX][A-Fa-f0-9][A-Fa-f0-9].*?\\x27)"}
        },
        "wildcard":{
            "0": {"regex": "[a-z][\\x2A\\x3F]{1,8}[a-z]", "length": 100, "condition": "<"},
            "1": {"regex": "(:?[^a-z0-9]\\x2F[e\\x3F\\x2A][t\\x3F\\x2A][c\\x3F\\x2A]\\x2F)", "length": 100, "condition": "<"}
        },
        "varible_name":{
            "0": {"regex": "\\x24([a-z\\x5F][0-9a-z\\x5F]*?)[0-9a-z\\x5F\\x2E]{0,80}\\x24([a-z\\x5F][0-9a-z\\x5F]*?)", "length": 500, "condition": "<"},
            "1": {"regex": "\\x3D[^\\x24].*\\x3D[^\\x24]", "length": 300, "condition": "<"}
        },
        "varible_name_score": {
            "0": {"regex": "\\x24\\x7B?([0-9a-z\\x5F]*)\\x7D?[0-9a-z\\x5F\\x2E]{0,50}"}
        }
    },
    "graphic": {"regex": "\\$\\{(_){10,}=(_){10,}\\}"},
    "special": {
        "symbol_varible_name": {"regex": "\\$\\{[\\*@\\!_\\?#\\$][^\\s]{1,10}"},
        "string_manipulation": {"regex": "printf[^\\x7C]*?((\\x27.*?[\\x7c](rev|base64|cut|md5sum|grep|sort|uniq|wc|tee|tr|col|join|paste|expand|split|xargs|colrm|comm|csplit|ed|egrep|ex|fgrep|fmt|fold|ispell|jed|joe|look|mtypre|pico|rgrep|sed|awk).*?\\x27)|(\\x22.*?[\\x7c](rev|base64|cut|md5sum|grep|sort|uniq|wc|tee|tr|col|join|paste|expand|split|xargs|colrm|comm|csplit|ed|egrep|ex|fgrep|fmt|fold|ispell|jed|joe|look|mtypre|pico|rgrep|sed|awk).*?\\x22))[^\\x7C]*?\\x7C[\\x20]*?(bash|\\${\\!#}|\\$BASH)"},
        "file_io": {
            "0": {"regex": "((eval|(bash\\s+-c)|(sh\\s+-c))[^\\x7c\\x3c\\x3e]*?(\\x22\\$\\x28)(.*?)(\\x29\\x22))|(eval|(bash\\s+-c)|(sh\\s+-c))[^\\x7c\\x3c\\x3e]*?(\\x27\\$\\x28)(.*?)(\\x29\\x27)"},
            "1": {"regex": "(printf|echo)[^\\x7c\\x3c\\x3e]*?((\\x22.*?\\x22)|(\\x27.*?\\x27))\\x3e.*?\/(\\w+.*?\\x3b)"},
            "2": {"regex": "[\\x3b](cat|tail|head).*?\/\\w+.*?"}
        }
    }
}